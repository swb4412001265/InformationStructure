class Pet:    #Create two variables kind and color; assign values    kind = "animal"    color = "brown"    def __init__(self, name):        #In the constructor, initialize the pets name        self.name = name    def do_tricks(self):        #Print the name of the pet and that it is doing tricks        print(self.name, "is doing tricks")        #Call the speak method        self.speak()        #Call the jump method        self.jump()    def speak(self):        pass    def jump(self):        passclass Jumper:    'This is a mixin class for jump'    def __init__(self, name):        self.name = name    def jump(self):        #Create jump method that prints that a Pet is jumping and the pets name        print(self.name, "is jumping")class Dog(Jumper, Pet):  #You will need to inherit for this to work    #Change kind to canine    kind = "canine"    def __str__(self):        #Print the name and description of dog        print("I am a dog named", self.name)    def __call__(self, action):        #Rollover action prints the name of the dog and that it is rolling over        if action == "Rollover":            print(self.name, "is rolling over")        #Owner action returns the name of the owner        if action == "Owner":            print("My owner is George")        class BigDog(Dog):  #You will need to inherit for this to work    # Change the color to tan    color = "tan"    def __str__(self):        #Print the name and description of BigDog        print(self.name, "is a large, muscular dog")    def speak(self):               # Print dogs name and what it says        print(self.name, "says Woof!!")class SmallDog(Dog):  #You will need to inherit for this to work    # Change the color to brindle    color = "brindle"    def __str__(self):        #Print the name and description of SmallDog        print(self.name, "is a tiny, cute dog")    def speak(self):               # Print dogs name and what it says        print(self.name, "says Yip!")class Cat(Jumper, Pet):  #You will need to inherit for this to work    #Change the kind to feline    kind = "feline"    def __str__(self):        #Print the name and description of cat        print("I am a cat named", self.name)    def speak(self):        # Print cats name and what it says        print(self.name, "says Meow!!!")    def climb(self):        #Prints the name of the cat and that it is climbing        print(self.name, "is climbing the curtains again")class HouseCat(Cat):  #You will need to inherit for this to work    #Change the color to white    color = "white"    def __str__(self):        #Print the name and description of cat        print(self.name, "is a cat with fluffy, white fur" )    def speak(self):        # Print cats name and what it says        print(self.name, "says Purr")    ############################################EXERCISE YOUR CODE#    1. Instantiate each class(except jumper)if __name__ == '__main__' :    instancePet = Pet("Taz")    instanceCat = Cat("Lion")    instanceDog = Dog("Roo")    instanceBigDog = BigDog("Noah")    instanceSmallDog = SmallDog("Lucky")    instanceHouseCat = HouseCat("Zebra")#    2. Create a list of the instantiated objects    instacneList = [instancePet, instanceCat, instanceDog, instanceBigDog, instanceSmallDog, instanceHouseCat]#    3. Loop through the objects    for itemOfList in instacneList:#    4. Print __str__        try:            itemOfList.__str__()        except AttributeError:            pass#    5. print the kind of pet        print(itemOfList.kind)#    6. Print the Color of the pet        print(itemOfList.color)#    7. Have the pet do tricks        itemOfList.do_tricks()#    8. if applicable, print rollover action and the owners name        try:            itemOfList.__call__("Rollover")        except AttributeError:            pass        try:            itemOfList.__call__("Owner")        except AttributeError:            pass#    9. If applicable, have the pet climb        try:            itemOfList.climb()        except AttributeError:            pass#    10. To separate each pet print underscores        print("__________________________________________________________")